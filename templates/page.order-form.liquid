<script src="https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"></script>

{% comment %}
Source: https://gist.github.com/carolineschnapp/9122054
Customized by: Michael X

This order form is a vue component that:
  - grabs collection data and converts it to arrays of product/variant objs
  - these objs hold all display and input data
  - upon submit these objs are used to construct payloads
  - payloads are queued up and executed synchonously (variant requirement)
  - loading state, then redirected to the cart once the queue is empty

{% endcomment %}

{% assign collection = collections.all %}
{% paginate collection.products by 100 %}

<!-- Form Component ---------------------------------------------------------->
<div id="app">

  <!-- Form Header ----------------------------------------------------------->
  <header class="collection-header">
    <div class="page-width">
      <div class="section-header text-center">
        <h1>Bulk Order Form</h1>
      </div>
    </div>
  </header>

  <!-- Loading State --------------------------------------------------------->
  <div
    v-if="isAddingToCart"
    class="loading-container"
  >

    <p>
      Hang on while we add update the cart with your order.<br>You will be redirected in a moment.
    </p>

    <img src="https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/chilling_8tii.svg">

    <div class="load-bar">
      <div class="bar"></div>
      <div class="bar"></div>
      <div class="bar"></div>
    </div>

  </div>

  <!-- Form ---------------------------------------------------------------->
  <form
    v-else
    v-on:submit.prevent="submitForm"
    method="POST"
    class="custom-order-form"
  >

    <template v-if="allProducts.length > 0">

      <!-- Product Table --------------------------------------------------->
      <table>

        <!-- Table Headers ------------------------------------------------->
        <thead>
          <tr>
            <th>Preview</th>
            <th>Name</th>
            <th>Price</th>
            <th>Engraving</th>
            <th class="product-header-donate">Donate</th>
            <th class="product-header-quantity">Quantity</th>
          </tr>
        </thead>

        <!-- Body ------------------------------------------------------------>
        <tbody>
          <template v-for="product in allProducts">
            <template v-if="product.available">
              <template v-for="variant in product.variants">
                <template v-if="variant.available">

                  <!-- Product Variant Row --------------------------------->
                  <tr>

                    <!-- Preview Image ------------------------------------->
                    <td class="product-preview">
                      <img
                        :src="product.featured_image"
                        @click="goToProduct(variant.url)"
                      />
                    </td>

                    <!-- Title --------------------------------------------->
                    <td
                      class="product-title"
                      @click="goToProduct(variant.url)"
                    >
                      ${product.title}
                      <template v-if="!variant.title.includes('Default')">
                        - ${variant.title}
                      </template>
                      <template v-if="variant.sku">
                        - ${variant.sku}
                      </template>
                    </td>

                    <!-- Price --------------------------------------------->
                    <td class="product-price">
                       ${variant.price}
                    </td>

                    <!-- Custom Engraving (optional) ----------------------->
                    {% if settings.engraving_enabled == 'yes' %}
                    <td class="product-engraving">
                      <input
                        type="text"
                        v-model="variant.engravingInput"
                      >
                    </td>
                    {% endif %}

                    <!-- Donate To SickKids (required) --------------------->
                    {% if settings.donate_enabled == 'yes' %}
                    <td class="product-donate">
                      <div>
                        {{ settings.donate_organization}}
                        ({{ settings.donate_percentage}}%)
                      </div>

                      <div class="radio-group">
                        <label class="custom-input-group">
                          <input
                            type="radio"
                            v-model="variant.donateInput"
                            v-bind:value="'yes'"
                          >
                          <span>Yes</span>
                        </label>
                        <label class="custom-input-group">
                          <input
                            type="radio"
                            v-model="variant.donateInput"
                            v-bind:value="'no'"
                          >
                          <span>No</span>
                        </label>
                      </div>
                    </td>
                    {% endif %}

                    <!-- Quantity -------------------------------------------->
                    <td class="product-quantity">
                      <input
                        type="number"
                        v-model="variant.quantityInput"
                        min=0
                        max="variant.inventory_quantity"
                      />
                    </td>
                  </tr>
                </template>
              </template>
            </template>
          </template>
        </tbody>

      </table>

      <!-- Actions ----------------------------------------------------------->
      <div
        class="form-actions"
        :class="error ? 'has-error' : '' "
      >
        <div v-if="error" class="error">${ error }</div>
        <button
          type="submit"
          class="btn product-form__cart-submit btn--secondary-accent"
        >
          Add to Cart
        </button>
      </div>

    </template>

    <template v-else>
      <p>There are no products in this view.</p>
    </template>

  </form>

</div>

{% endpaginate %}

<!-- Vue --------------------------------------------------------------------->
<script>

  // Construct product/variant objects from collection
  // use in vue for display and form
  let allProducts = []
  let allVariants = []

  // Products
  {% for product in collection.products %}
    var productObj = {}
    productObj.id = "{{ product.id }}"
    productObj.available = "{{ product.available }}"
    productObj.featured_image =  "//cdn.shopify.com/s/files/1/0063/1770/3239/" + "{{ product.featured_image }}"
    productObj.variants = []
    productObj.title = "{{ product.title }}"
    allProducts.push(productObj)

    // Variants
    {% for variant in product.variants %}
      var variantObj = {}

      // internal properties
      variantObj.id = "{{ variant.id }}"
      variantObj.available = "{{ variant.available }}"
      variantObj.url = "{{ variant.url }}"
      variantObj.featured_image = "{{ variant.featured_image }}"
      variantObj.title = "{{ variant.title }}"
      variantObj.sku = "{{ variant.sku }}"
      variantObj.price = "{{ variant.price | money }}"
      variantObj.inventory_quantity = "{{ variant.inventory_quantity }}"
      variantObj.inventory_management = "{{ variant.inventory_management }}"
      variantObj.inventory_policy = "{{ variant.inventory_policy }}"
      variantObj.product_title = "{{ product.title }}"

      // editable properties
      variantObj.donateInput = 'no'
      variantObj.engravingInput = ''
      variantObj.quantityInput = 0

      productObj.variants.push(variantObj)
      allVariants.push(variantObj)

    {% endfor %}

  {% endfor %}

  // set base url for shop
  const shopURL = "{{ shop.url }}"

  //-- Form -------------------------------------
  var form = new Vue({
    delimiters: ['${', '}'],
    el: '#app',

    data() {
      return {
        allProducts: allProducts,
        allVariants: allVariants,
        payloads: [],
        isAddingToCart: false,
        shopURL: shopURL,
        error: null
      }
    },

    computed: {

      filteredVariants() {
        return this.allVariants.filter(variant => variant.quantityInput > 0)
      }

    },

    methods: {

      goToProduct(url) {
        window.location.href = this.shopURL + url
      },

      submitForm() {
        this.error = null
        this._validateForm()

        if(!this.error) {

          // gather form data
          const filteredVariants = this.filteredVariants

          // create request payloads
          let payloads = this.payloads

          filteredVariants.forEach(variant => {
            payloads.push({
              id: parseInt(variant.id),
              quantity: parseInt(variant.quantityInput),
              properties: {
                'Donate': variant.donateInput,
                'Engraving': variant.engravingInput
              }
            })
          })

          // start request chain
          this.isAddingToCart = true
          document.body.scrollTop = 0; // Safari
          document.documentElement.scrollTop = 0; // Chrome, FF, IE, Opera
          this._moveAlong()
        }
      },

      //-- Internal -----------------------------
      _validateForm() {
        const filteredVariants = this.filteredVariants
        let hasSelectedQuantity = []

        filteredVariants.forEach(variant => {

          // validate quantity
          if (parseInt(variant.quantityInput) > 0) {
            hasSelectedQuantity.push('ok')
          }

          // validate inventory stock
          if (parseInt(variant.quantityInput) > variant.inventory_quantity) {
            this.error = `${variant.product_title} only has ${variant.inventory_quantity} in stock.`
            return
          }

          // validate engraving

        })

        if (hasSelectedQuantity.length < 1) {
          this.error = 'Please select at least one item'
        }

      },

      _addItem(payload) {
        fetch('/cart/add.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        }).then(response => response.json())
          .then(() => { this._moveAlong() })
      },

      _moveAlong() {
        const payloads = this.payloads
        if (payloads.length) { // requests in queue, process next request
          const request = payloads.shift();
          this._addItem(request);
        } else { // queue empty, redirect to checkout
          window.location.href = "/checkout";
        }
      }

    }

  })

</script>
